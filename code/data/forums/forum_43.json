{"title": "Encrypted Chat: Part I - Programming - 0x00sec - The Home of the Hacker", "users": ["http://0x00sec.org/u/spec", "http://0x00sec.org/u/Joe_Schmoe", "http://0x00sec.org/u/oaktree", "http://0x00sec.org/u/Joe_Schmoe", "http://0x00sec.org/u/dtm", "http://0x00sec.org/u/pry0cc", "http://0x00sec.org/u/spec", "http://0x00sec.org/u/system"], "data": [{"author": "spec", "speak": "The ProjectI started programming an encrypted chat client and server to learn more about encryption and how it\u00e2\u20ac\u2122s implemented in network protocols (e.g. SSH or HTTPs over TLS). Now that it\u00e2\u20ac\u2122s almost complete, I wanted to share what I learned with you.I\u00e2\u20ac\u2122m splitting up this series into two posts. The first, a.k.a. this one, will cover the concepts needed to understand how the program works. The second will dive into the code and connect these concepts with what the program is actually doing. Props to @oaktree for suggesting this format.Let\u00e2\u20ac\u2122s get started.Part One: The Conceptual OverviewThe objective is to establish a shared key for encrypting and decrypting messages sent between a client and a server.To set up a chat room, a client must be able to securely send messages to a server\u00e2\u20ac\u201dand vice versa. Symmetric encryption, which uses the same key for encrypting and decrypting messages, is a really good candidate for this task. However, to do so, the two parties must agree upon a key.**Remember: encryption keys are just really big numbersSo how can we get two computers to have the same big number? We can\u00e2\u20ac\u2122t just send it over the wire\u00e2\u20ac\u00a6 that would defeat the purpose of encrypting in the first place, since an eavesdropper could just steal the key and decrypt everything. Instead, we\u00e2\u20ac\u2122ll use something called the Diffie-Hellman Key Exchange.Step 1: Diffie-Hellman Key ExchangeA really clever way of generating a shared key.Diffie-Hellman (or DH for short) uses finite cyclic groups to have two entities come to the same number without ever explicitly sharing it. Many implementations use the multiplicative group of integers modulo p, where p is a prime number, for their finite cyclic group. However, other options such as elliptic curves also exist (you\u00e2\u20ac\u2122re using one right now to view this webpage!).Crazy maths aside, the actual concept behind the exchange isn\u00e2\u20ac\u2122t all that hard to grasp, and the mathmatical operations necessary to perform it are grade-level too. Here\u00e2\u20ac\u2122s the diagram listed on Wikipedia:Illustration of the idea behind Diffie-Hellman Key ExchangeIn our case, the \u00e2\u20ac\u0153common paint\u00e2\u20ac\ufffd is a really large prime modulus p (at least 2048-bit) and prime base g. These values can be publicly shared without threatening our security. The \u00e2\u20ac\u0153secret colors\u00e2\u20ac\ufffd are just random numbers generated by each participant and kept private. The whole thing works because of the following:(g^a % p)^b % p = (g^b % p)^a % pWhere a and b are the \u00e2\u20ac\u0153secret colors\u00e2\u20ac\ufffd and % is the modulus operator (which is just dividing and returning the remainder). Why are these expressions equal, you ask? I am not qualified to tell you. I suppose it\u00e2\u20ac\u2122s sort of like asking why 2 + 2 = 4, except much harder to wrap your head around\u00e2\u20ac\u201dit\u00e2\u20ac\u2122s just the way it is. If anyone knows of a good explanation of this equation, please leave a comment as I\u00e2\u20ac\u2122d love to understand it better myself. I haven\u00e2\u20ac\u2122t studied group theory yet, but maybe someone who has can step in here.It\u00e2\u20ac\u2122s okay if you don\u00e2\u20ac\u2122t fully understand conceptually what\u00e2\u20ac\u2122s happening here, I\u00e2\u20ac\u2122ll go over it in more detail when we look at the code. The important thing is we now have the same number: once we have that, we can move on to the next step.Step 2: AES EncryptionThe Advanced Encryption StandardAES is a widely used symmetric encryption algorithm for its speed and security. Unless a system using it is leaking data (e.g. through a poor implementation), the only way to crack it is via brute force. We\u00e2\u20ac\u2122ll be using AES-256 in Cipher Block Chaining mode, which relies on a 256-bit key (which is also why you\u00e2\u20ac\u2122ll see we\u00e2\u20ac\u2122ll be passing our shared big number through SHA-256 to standardize it to 256 bits in length) and causes each block in the series to rely on the previous one.AES-SubBytes.png1266x656 74 KBIn this mode, we\u00e2\u20ac\u2122ll have to start our messages with an initialization vector which serves as a starting block in our chain to scramble each successive block.In CBC mode, each block of plaintext is XORed with the previous ciphertext block before being encrypted. This way, each ciphertext block depends on all plaintext blocks processed up to that point.This is what the IV is for, as you cannot XOR a previous cipher-text if you haven\u00e2\u20ac\u2122t even started ciphering(Thanks to @pry0cc for this clarification)Unlike the encryption key, this value can be shared publicly. It\u00e2\u20ac\u2122s used to make reverse-engineering the key basically impossible, as encrypting \u00e2\u20ac\u0153hello\u00e2\u20ac\ufffd twice with the same key but two different initialization vectors will come out completely different. But we have to be careful, reusing the same IV can degrade the security of our communications. See WEP for how this can go wrong.We also need to add in some extra characters, or \u00e2\u20ac\u0153padding\u00e2\u20ac\ufffd, so that our message is a multiple of the AES block size in length. Tagging on spaces to the end of the message is easy to strip on the other end, so we\u00e2\u20ac\u2122ll use that. Thus, the first block will be our IV and each successive block will belong to our message, including any padding.That\u00e2\u20ac\u2122s it! We can now send encrypted messages back and forth between the server and the client. The client will submit encrypted chat messages to the server, which will then decrypt the messages and re-encrypt them with each client\u00e2\u20ac\u2122s key that it will broadcast to. To anyone eavesdropping over the network, each message will look entirely different and none of the contents will be decipherable.Wrapping It UpI hope you enjoyed this conceptual overview of my encrypted chat program. Join me next time when we look over some key points of the code and see exactly how these concepts were implemented. The post should be up soon, but for now you\u00e2\u20ac\u2122re welcome to take a sneak peek at the source on GitHub: https://github.com/spec-sec/SecureChat. If you have any suggestions or clarifications, please leave a comment. Thanks for reading!~ specNext: Part II"}, {"author": "Joe_Schmoe", "speak": "Nice project. I\u00e2\u20ac\u2122d suggest adding a way to verify the identity of people you are chatting with, something like SSL certificates."}, {"author": "oaktree", "speak": "Is that like fingerprinting or something?"}, {"author": "Joe_Schmoe", "speak": "Kind of? The ability to check if you are connected to the correct server and people you are talking to would be nice."}, {"author": "dtm", "speak": "Would that require a signed certificate? Is it possible that a MitM send you their false, unsigned certificate to pretend to be the server? Unless you know 100% what the legitimate certificate looks like."}, {"author": "pry0cc", "speak": "I am loving this series.Diffie-Hellman was quite straightforward to understand, especially with that diagram. However I got a little lost with the cipher block chaining concept. After reading the wikipedia article, it makes a lot more sense. To anybody that got lost in that bit, it works by:In CBC mode, each block of plaintext is XORed with the previous ciphertext block before being encrypted. This way, each ciphertext block depends on all plaintext blocks processed up to that point.This is what the IV is for, you cannot XOR a previous ciphertext, if you haven\u00e2\u20ac\u2122t even started ciphering yet, right?This is a banging article @spec, good job! I am looking forward to seeing how this works in code. Turning math into code always makes things easier to understand IMO. Coding really is just practical mathematics."}, {"author": "spec", "speak": "Thank you for elaborating on that, it\u00e2\u20ac\u2122s a crucial part of understanding why the IV is necessary. Can\u00e2\u20ac\u2122t wait to get the next post out, you have some great insight."}, {"author": "system", "speak": "This topic was automatically closed after 30 days. New replies are no longer allowed."}]}