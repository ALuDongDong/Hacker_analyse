{"title": "[PHP] File inclusion vulnerability - Web Hacking - 0x00sec - The Home of the Hacker", "users": ["http://0x00sec.org/u/Poacher", "http://0x00sec.org/u/Poacher", "http://0x00sec.org/u/direnjie", "http://0x00sec.org/u/fxbg", "http://0x00sec.org/u/Emrelqqq", "http://0x00sec.org/u/Poacher", "http://0x00sec.org/u/Poacher", "http://0x00sec.org/u/Poacher", "http://0x00sec.org/u/COLD_EYES", "http://0x00sec.org/u/Poacher", "http://0x00sec.org/u/zxy86228436", "http://0x00sec.org/u/nugget", "http://0x00sec.org/u/zxy86228436", "http://0x00sec.org/u/nugget", "http://0x00sec.org/u/zxy86228436", "http://0x00sec.org/u/pry0cc", "http://0x00sec.org/u/pry0cc"], "data": [{"author": "Poacher", "speak": "PrefaceA file inclusion vulnerability is a type of vulnerability that is most commonly found to affect web applications that rely on a scripting run time. This issue is caused when an application builds a path to executable code using an attacker-controlled variable in a way that allows the attacker to control which file is executed at run time. If a file contains this loophole ot often was implemented in the development stage for convenience.  Because it is often used in development and later forgotten, it has become the target of multiple attacks and has resulted in a variety of file-based attacks.Local file inclusionFirst of all, when the value can directly  be be controlled we have a very similar code snippet as below present:<? php$ file = $ _GET ['file'];include ($ file);If we can find the above code,  there is a directly included $file, which we have control over.Note: The file can be anything. It is included no matter if it\u00e2\u20ac\u2122s an exptected file type, a picture, or anything arbitrary.First of all in the current folder create an arbitrary file with any suffix, such as: file.txt (even if it is a picture format like file.jpg then the following effect takes place).Set the contents of the file as:<? phpphpinfo ();957843622.png2052x864 116 KBFile Inclusion Vulnerabilities also contain other files within the current server while supporting directories that contain web applications, as follows:Try to include some of the contents of your HDD for example: C:\\WINDOWS\\system.ini441958098.png1936x854 92.1 KBIf we do this, we can see that the contents of any file will be outputted to the browser.This only works if we have total control and the file type is not further specified.So what can we do if the code snippet changes to this:<?php$file = $_GET['file'] . '.php';echo $file;include($file);In this case, we can try to follow the  method above:This will result in an output like this:3465450773.png1704x326 49.5 KBWe can see that if the  suffix is fixed, then just like in the figure above, we will not find the file we included earlier.The searched for filename is: ./Include.txt.php.So here\u00e2\u20ac\u2122s another way to do that: %00 truncates a string upon reaching.This trick is widly spread and used in different areas as well.I won\u00e2\u20ac\u2122t go into any more detail here .I recommend checking out online ressources like this!Using %00 in PHP:PHP version <5.3 (excluding 5.3);PHP magic_quotes_gpc = off;PHP does not use the addslashes function for the received parameters, such as `$ _GET [\u00e2\u20ac\u02dcfile\u00e2\u20ac\u2122] in the above codeIn PHP version 5.3 or later this issue has been fixed.The sequence will be correctly  escaped if gpc is turned on or theaddslashes function is used.First of all, we can try what happens if the gpc is turned on (the effect is the same as using the function)2941944704.png864x538 16.7 KB2773143791.png1508x326 48.4 KBWe can directly see how this case is handled if we enable the gpc flag.Next we take a look at the situation in 5.3:618663116.png1352x796 110 KB1818744731.png1750x294 37.9 KBThere is no noticeable effect here either.So we can see that as long as the above three conditions are satisfied, %00 can be used.First we change the PHP version to 5.2 and restart Apache after php.ini changes magic_quotes_gpc = on tomagic_quotes_gpc = off.This enables us to use truncation when attempted.3535381620.png1838x988 129 KBWe can see that we have successfully made use of truncated inclusion.So does the file only contain the included functions?That is certainly not the case, since we have control of what can be included let\u00e2\u20ac\u2122s do this  .Let\u00e2\u20ac\u2122s create a file: shell.txt  to further exploit this vulnerability.2315018220.png1248x482 8.03 KBWe can see,  including shell is not a problem either.So what is the difference between the two? In fact, there is no difference, the principle is the same, but the first is introduced with the suffix, the second is fixed in the program dead suffix. But % 00 can be used because it terminates directly when the program stream encounters% 00 terminator.remote file inclusionThe local file contains the same principle as the remote file, except that the former can only contain the files that exist on the server, and the latter can contain the files on the remote server.For remote files we need to consider the following:Need allow_url_include = on andallow_url_fopen = on in php.iniThe required remote file suffix  cannot be the same as the target server\u00e2\u20ac\u2122s language, such as (the target server parses PHP code, then the remote file suffix  can not be .php)Let me  explain the second point.If your remote file has  .php suffix and your remote file content is something like:<? phpphpinfo ();Then the contents of the target server are obtained after your remote server executes phpinfo()It will not run the code, so the information contained is not the target server but your remote server.This is illustrated below:3402461499.png2026x1040 568 KBThis is my remote machines information for PHP5.6 version, the target machine is version 5.2.Next we  include the file!3378068281.png2342x890 480 KBWe can see that after the file is included, our remote machine changed! why??Because the target server does not contain the this code:<? php phpinfo ();?>Instead, the remote server executes the source code of this code, as shown below:3891035635.png1894x822 167 KBSo to make this attack work we need to make a few modifications:1.Modify the configuration3765667797.png992x580 18.9 KB2.Modify the file suffix2234506515.png1040x394 17 KBLet\u00e2\u20ac\u2122s try the include attack vector again:1549644820.png1814x810 118 KBWe can see the desired information got returned after this inclusion and  our target machine information did not change anymore.Next up we want to do the shell example again for the remote file inclusion58443275.png784x286 25.6 KB3886119717.png1280x342 7.64 KBRemote file contains the use of the premise is in line with the local file contains the premise and meet the remote file contains the premise of its availability.File contains on of many pseudo-protocolsThere can be quite a few different pseudo-protocols contained in a file.I\u00e2\u20ac\u2122ll demonstrate a few of them below.data:text/plain or data: text/plain; base64php://inputphp://filterfile://zip://Other protocols can looked up in the official documentationdata:text/plainOutput is directly in the corresponding URL showing the parameters: data:text/plain.Then we need to execute the php code as shown below:3116914365.png2016x882 125 KBdata: text/plain; base64For data: text/plain; base64` there is another way to use it.We need to execute PHP code using base64 encoding: the base64php code is as shown below:4064850690.png1974x768 119 KBphp://inputphp://input accesses the read-only stream of the requested raw data, executing the data in the post request as PHP code.1475499797.png1534x1202 111 KBYou can see that the program has automatically an added .php suffix.Hence using include php://input will automatically add.php so it is certainly not working properly.We can come back to the nifty little %00 trick to  truncate the file path!655724549.png2184x1288 313 KB1209641233.png2122x1248 210 KBYou can see the terminator is very powerful.php://filterphp://filter can read the php file code base64 encoded output and return it to us.For example, we want to read a php file but do not want it to be normal php.Usage: php://filter/read=convert.base64-encode/resource=../ressource=  needs to read the contents of the file code22423135.png1720x274 36.5 KBAfter decoding the base64 we can get the contents as usual:1600112980.png1620x736 33.1 KBfile://file:// is used to access the local file system and is not affected by allow_url_fopen orallow_url_include.Usage: file://absolute/path/to/file1283401618.png1916x310 47.7 KBzip://zip://  can access the files in a zip file. But it needs an absolute path.Usage: zip://[archive absolute path] # [compressed file name]Create a file locally and compress it into a zip archive.1079623094.png2056x338 61.7 KBYou can see that I have already filled in the absolute path and the name of the file.Why we cannot include it successfully shows the error:Warning: include (zip://C:/phpStudy/WWW/include/phpinfo.zip.php)We do not want to include this file, instead we want to include the file inside the zip!Why is the value after # gone?Because # will ignore the parameters behind it, so we need to use the  %23  in the form.Another point is that the included file ends in a .php, but we compressed the file for the php suffix.So we do not need to have this suffix, as shown below:PS\u00ef\u00bc\u0161My English is not good, please understand!"}, {"author": "Poacher", "speak": "Hope to make friends in the community, exchange and study together!"}, {"author": "direnjie", "speak": "i see Chinese chopper \u00ef\u00bc\u203a\u00ef\u00bc\u2030"}, {"author": "fxbg", "speak": "I remember publishing a paper about this back in 2006, or maybe it was earlier. I am still surprised to see these kinds of exploits in the wild. nice coverage of this kind of exploit."}, {"author": "Emrelqqq", "speak": "ingilizcem yetmiyor g\u00c3\u00bczel d\u00c3\u00b6k\u00c3\u00bcman da sikcem ya translate bi bok anlatam\u00c4\u00b1yorEDIT: English translation (from Turkish) by @oaktree:I do not have enough english to translate a good document"}, {"author": "Poacher", "speak": "Yes, that\u00e2\u20ac\u2122s right. Haha!"}, {"author": "Poacher", "speak": "Sorry, you can try Google Translate"}, {"author": "Poacher", "speak": "In fact, there are many ways to use this attack"}, {"author": "COLD_EYES", "speak": "php5.3\u00e4\u00bb\u00a5\u00e4\u00b8\u2039\u00e5\u00b7\u00b2\u00e7\u00bb\ufffd\u00e4\u00b8\ufffd\u00e5\u00a4\u0161\u00e8\u00a7\ufffd\u00e4\u00ba\u2020\u00ef\u00bc\u0152\u00e4\u00b8\ufffd\u00e8\u00bf\u2021\u00e8\u00bf\u02dc\u00e6\u02dc\u00af\u00e8\u00b0\u00a2\u00e8\u00b0\u00a2\u00e5\u02c6\u2020\u00e4\u00ba\u00ab\u00ef\u00bc\u0152\u00e5\u00ad\u00a6\u00e5\u02c6\u00b0\u00e4\u00ba\u2020EDIT: English translation (from Chinese) by @ricksanchez:PHP version 5.3 is kinda rare nowadays but thank you for sharing it. I learned something"}, {"author": "Poacher", "speak": "Thank you. We can learn from each other."}, {"author": "zxy86228436", "speak": "I am also Chinese, do not understand English, reluctantly understand the meaning of the forum by translation software, do not know how this forum can whisper these gods. I need the help of the Great God."}, {"author": "nugget", "speak": "Ah yes we all need help of great god, meaning and understand from forum of translations is the key to unlocking chinese to english conversion softwares"}, {"author": "zxy86228436", "speak": "\u00e4\u00bd\u00a0\u00e4\u00b9\u0178\u00e6\u02dc\u00af\u00e4\u00b8\u00ad\u00e5\u203a\u00bd\u00e4\u00ba\u00ba\u00e5\ufffd\u2014\u00ef\u00bc\u0178\u00e6\u02c6\u2018\u00e4\u00bb\u00ac\u00e4\u00b8\u00ad\u00e5\u203a\u00bd\u00e4\u00ba\u00ba\u00e5\ufffd\u00a3\u00e5\u00b0\u00b1\u00e6\u02dc\u00af\u00e5\u00a4\u0161\u00e5\u201c\u02c6\u00e5\u201c\u02c6\u00e3\u20ac\u201a"}, {"author": "nugget", "speak": "zxy86228436:\u00e4\u00bd\u00a0\u00e4\u00b9\u0178\u00e6\u02dc\u00af\u00e4\u00b8\u00ad\u00e5\u203a\u00bd\u00e4\u00ba\u00ba\u00e5\ufffd\u2014\u00ef\u00bc\u0178\u00e6\u02c6\u2018\u00e4\u00bb\u00ac\u00e4\u00b8\u00ad\u00e5\u203a\u00bd\u00e4\u00ba\u00ba\u00e5\ufffd\u00a3\u00e5\u00b0\u00b1\u00e6\u02dc\u00af\u00e5\u00a4\u0161\u00e5\u201c\u02c6\u00e5\u201c\u02c6\u00e3\u20ac\u201a\u00e6\u02c6\u2018\u00e5\u00be\u02c6\u00e8\u2021\u00aa\u00e8\u00b1\u00aa\u00e7\u0161\u201e\u00e8\u2039\u00b1\u00e5\u203a\u00bd\u00e4\u00ba\u00ba\u00ef\u00bc\u0152\u00e4\u00bb\ufffd\u00e8\u00a5\u00bf\u00e6\u2013\u00b9\u00e4\u00b8\ufffd\u00e6\u02dc\u00af\u00e4\u00b8\u00ad\u00e5\u203a\u00bd\u00e4\u00ba\u00ba:(\u00e4\u00bd\u2020\u00e6\u02c6\u2018\u00e7\u203a\u00b8\u00e4\u00bf\u00a1\u00e4\u00bc\u0178\u00e5\u00a4\u00a7\u00e7\u0161\u201e\u00e4\u00b8\u0160\u00e5\u00b8\ufffd\u00ef\u00bc\ufffd"}, {"author": "zxy86228436", "speak": "\u00e5\u201c\u02c6\u00e5\u201c\u02c6\u00ef\u00bc\u0152\u00e5\ufffd\u00af\u00e4\u00bb\u00a5\u00e9\u2014\u00ae\u00e4\u00b8\u20ac\u00e5\ufffd\u00a5\u00e4\u00bd\u00a0\u00e7\u0161\u201e\u00e9\u00bb\u2018\u00e5\u00ae\u00a2\u00e6\u0160\u20ac\u00e6\u0153\u00af\u00e7\u2030\u203a\u00e9\u20ac\u00bc\u00e5\ufffd\u2014\u00ef\u00bc\u0178\u00e5\u2013\u201e\u00e6\u201e\ufffd\u00e7\u0161\u201e\u00e6\ufffd\ufffd\u00e9\u2014\u00ae\u00e5\u201c\u02c6\u00e3\u20ac\u201a"}, {"author": "pry0cc", "speak": "\u00e8\u00bf\u2122\u00e4\u00b8\u00aa\u00e5\u00af\u00b9\u00e8\u00af\ufffd\u00e6\u0153\u20ac\u00e9\u20ac\u201a\u00e5\ufffd\u02c6IRC\u00e3\u20ac\u201a \u00e8\u00af\u00b7\u00e9\u0161\ufffd\u00e6\u2014\u00b6\u00e6\u0178\u00a5\u00e7\u0153\u2039\u00ef\u00bc\u0152irc.0x00sec.org"}, {"author": "pry0cc", "speak": ""}]}