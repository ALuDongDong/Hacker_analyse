{"title": "Malware Reversing - Burpsuite Keygen - Reverse Engineering - 0x00sec - The Home of the Hacker", "users": ["http://0x00sec.org/u/lkw", "http://0x00sec.org/u/dtm", "http://0x00sec.org/u/termhn", "http://0x00sec.org/u/pry0cc", "http://0x00sec.org/u/W0lf", "http://0x00sec.org/u/SecurityFlaw", "http://0x00sec.org/u/fraq", "http://0x00sec.org/u/byakuganIII", "http://0x00sec.org/u/fraq", "http://0x00sec.org/u/lkw", "http://0x00sec.org/u/byakuganIII", "http://0x00sec.org/u/system"], "data": [{"author": "lkw", "speak": "DISCLAIMER: The following post contains a virus sample. If you decide to mess with it you do so at your own risk. Do not go running it on your computer, at least use a VM.Some random new \u00e2\u20ac\u0153user\u00e2\u20ac\ufffd called @the_heat_man posted some files on the forums multiple times (after being deleted by mods) caliming it was a keygen for burpsuite. Many members of these forums were suspicious of it being malware. I, along with @Leeky, @dtm, @Cry0l1t3 and @L0k1 (please let me know if I missed anyone) decided to reverse engineer it to see if it is. Surprisingly as well as containing a remote access trojan (RAT) it actually contains a working keygen. As such, for legal reasons I have not included a link to the original file.The following is a writeup of the analysis of the RAT.The keygen comes with a file called virus.txt which contains what appears to be a link to a virus total scan of the keygen jarfileScreen Shot 2018-01-30 at 8.45.16 pm.png1277x626 62 KBHowever the hash on virus total is different to the actual file, indicating that it\u00e2\u20ac\u2122s a scan of a different file(NOTE: iirc when I originally visited the page all the scans were clean and the file name matched the file burp-loader-keygen1.7.31.jar . The page says the last analysis was today, so that may have something to do with it.)> shasum -a 256 burp-loader-keygen1.7.31.jar1bf764e77a543def4c623e6e207b1b72999f6550cf49651b88d53f80ae10e4d7  burp-loader-keygen1.7.31.jarJars are stored as zip files so we can extract the jar with unzip.> cp burp-loader-keygen1.7.31.jar burp-loader-keygen1.7.31.zip> unzip burp-loader-keygen1.7.31.zipArchive:  burp-loader-keygen1.7.31.zip   creating: META-INF/ extracting: META-INF/MANIFEST.MF       creating: burploader/ extracting: burploader/Burploader.class   extracting: burploader/Data.bin There is a class file which can be decompiled, I will use jad, which is installed on kali.> jad burploader/Burploader.classHere is the important part of the decompiled java codeScreen Shot 2018-01-30 at 9.03.23 pm.png1272x434 44.7 KBBefore this part is a base64 encoding of another jarfile contaning the keygen. That is stored in m. The decode function decodes the base64 and writes it to a file called Data.jarThis section of code contains powershell commands to download and run this powershell script http://imonty.cn/wp-includes/pomo/script/dcss/js.js(the extension is .js but it is actually powershell)and to also run the keygen.Let\u00e2\u20ac\u2122s download that code and have a look.Screen Shot 2018-01-30 at 9.04.48 pm.png1273x419 49.9 KBThis drops two more files into a newly made c:\\ProgramData\\WindowsNT directoryThe files are:http://imonty.cn/wp-includes/pomo/script/dcss/co.js saved as WindowsNT.ini andhttp://imonty.cn/wp-includes/pomo/script/dcss/co.vbs saved as WindowsNT.vbsIt then runs the visual basic script (co.vbs), so let\u00e2\u20ac\u2122s look at that firstScreen Shot 2018-01-30 at 9.04.21 pm.png1274x458 84.4 KBHere we have obfuscated visual basic code. The easiest method to deobfuscate is to replace the part of the code that executes with something that prints (This may not work in all cases, but it is a very useful technique). Here, clearly, the part that executes the deobfuscated code is the EVAL(ExEcUTE(www))  (circled)(what this file is actually doing, is to split the long string at every * and then evaluate the expressions in the resulting list, and turning the results of the math expressions into characters. Finally running the resulting string from concatenating those characters)To print the string instead of executing we can replace the EVAL(ExEcUTE(www))  with wscript.echo www and run it.vb.png839x244 7.26 KBWhat this does is run the other downloaded file, co.js (saved as WindowsNT.ini) in powershell.So let\u00e2\u20ac\u2122s look at co.jsThis file is large, so I have uploaded it hereI gziped and b64ed the file to make it upload nicely, you should do cat co.ps1.gzip.b64 | base64 -d | gunzip > co.ps1 to read itI have also renamed co.js to co.ps1 to make the ./ in powershell work easier.Screen Shot 2018-01-30 at 9.07.12 pm.png1270x630 189 KBiex (alias for invoke-expression) is a function that evaluates powershell code, so we need to replace it with write-output to print it instead, then run the file.The modified code should look like thisScreen Shot 2018-01-30 at 9.08.42 pm.png1265x631 189 KBI was running in a new virtual machine, so I had to allow untrusted powershell scripts to execute.After running powershell as an administrator:execution.png839x159 7.54 KBPS E:\\burp\\burploader> ./co.ps1 > co.2.ps1I uploaded the resulting file hereWe have yet another layer of obfusication.The beginning of this fie looks like thisScreen Shot 2018-01-30 at 9.11.32 pm.png1271x630 228 KBThis time it calls Invoke-Expression instead of iex, replace it with write-output .Screen Shot 2018-01-30 at 9.12.20 pm.png1267x631 228 KBNow run it.PS E:\\burp\\burploader> ./co.2.ps1 > co.3.ps1FileThe first thing to notice is that the new file has three sections separated by blank lines. I made the mistake of missing the first section and couldn\u00e2\u20ac\u2122t find some needed code later (this was found by @leeky and @dtm). Instead of trying to deobfusicate the whole file at once (like I did) I learnt that it would have been better to split it 3 smaller files and do them one at a time.First section:The end of the section looks like this.Screen Shot 2018-01-30 at 9.13.36 pm.png1271x632 150 KBWe don\u00e2\u20ac\u2122t have something that looks as nice as invoke-expression this time, however since the execution will be done last it is most likely that the call will be on one of the ends, the left with the deobfusicated code as an arguement, or the right, with the code piped into the standard input.In this case the left just consists of a bracket, so let\u00e2\u20ac\u2122s check the rightmost statement after a pipe (circled)..( $PsHOmE[21]+$PShOMe[30]+'X') Interesting. let\u00e2\u20ac\u2122s see what $PsHOmE[21]+$PShOMe[30]+'X' evaluates to.PS E:\\burp\\burploader> $PsHOmE[21]+$PShOMe[30]+'X'ieXso we need to replace the .( $PsHOmE[21]+$PShOMe[30]+'X') with write-outputScreen Shot 2018-01-30 at 9.16.34 pm.png1266x632 147 KBThe result is more obfusicated code.Screen Shot 2018-01-30 at 9.20.12 pm.png1269x634 122 KBLet\u00e2\u20ac\u2122s repeat the same idea. What is .( $eNv:PuBliC[13]+$eNv:pUBLiC[5]+'x') at the beginningPS E:\\burp\\burploader> $eNv:PuBliC[13]+$eNv:pUBLiC[5]+'x'iexso replace it with write-outputScreen Shot 2018-01-30 at 9.21.13 pm.png1267x628 120 KBAfter executing there is more obsusication, so do it again on the new file replacing& ($pShoME[21]+$pShoME[34]+'X') at the end with write-outputAnd again with &( $pShoME[21]+$pSHOMe[30]+'X') at the beginningSecond section:(starts with [String]::JoIN(\u00e2\u20ac\u2122\u00e2\u20ac\u2122,( [Char[]]( 127 ,105 )The end of the second section looks like thisScreen Shot 2018-01-30 at 9.22.00 pm.png1268x631 94.7 KBReplace .((gV '*mDR*').nAme[3,11,2]-joIn'') at the end with write-outputIt\u00e2\u20ac\u2122s still obfusicated. So, look at the end .( $pShoME[4]+$PsHoMe[30]+'X') , replace with write-output and then execute.And then we need to do this again, replacing &( ([sTrINg]$verbosePREFerencE)[1,3]+'x'-JOIN'') near the beginning with write-outputAnd one last time, replacing . ( $Env:comsPec[4,15,25]-JOiN'') at the end with write-outputThird section:The start of the third section looks like thisScreen Shot 2018-01-30 at 9.22.42 pm.png1271x628 99.3 KBReplace .( $PsHome[4]+$PShoME[34]+'X') at the beginning with write-output and execute.This section now looks pretty readable, particually if we replace the function names.This is as far as we can get with this method. The function names must be found through manual analysis and unmangling the variable names and content must be done through another method, such as manual or writing a script.The output of concatenating all this back together is hereHere is a modification of the code I made without the messy variables and making up names for some of the functions.Virustotal does not detect the powershell script as a virus hereScreen Shot 2018-01-30 at 8.50.21 pm.png1279x626 54.9 KBSome heuristics, however, detect the dropper hereScreen Shot 2018-01-30 at 8.50.54 pm.png1279x627 64.9 KBThe first section just contains variables, however the names and values are very mangled.Screen Shot 2018-01-30 at 9.26.56 pm.png1270x630 110 KBFrom analysing the functions we worked out that the variable $dragon_middle contains domains that the RAT will try to connect to (going through them until it can connect to one). The variables $private and $public contain encryption and decryption keys for data that is transfered by the RAT. @Leeky pulled these out by looping over the arrays and printing the contents. The results are here@Cry0l1t3 Went through the domains and highlighted this one for having a different host than all the others.@dtm made a more complete list of variables here I don\u00e2\u20ac\u2122t know enough about windows to say how this was produced. But based on the format I think he used a command to print the environment (correct me if I\u00e2\u20ac\u2122m wrong).While it doesn\u00e2\u20ac\u2122t have all the elements in $dragon_middle it contains some other interesting variables such as the serivces it uses to find the victim\u00e2\u20ac\u2122s ip https://api.ipify.org/ and country http://apinotes.com/ipaddress/ip.php?ip=.He also made a packet capture of it trying to contact a server.The second section contains the code for encryption and decryption, and the 3rd section contains the rest of the code.The RAT uses RSA to communicate to a server. Weirdly, I think the public key and private key have been named the wrong way around.Screen Shot 2018-01-30 at 9.28.25 pm.png1271x632 33.3 KBScreen Shot 2018-01-30 at 9.29.15 pm.png1273x334 18.8 KBThe public key and private key have different moduli which indicates they are most likely from different key pairs.Messages sent to the server are encrypted with the server\u00e2\u20ac\u2122s public key ($secret in the code) and decrypted by the server\u00e2\u20ac\u2122s private key (stored on the server)Messages sent to the RAT are encrypted with the RAT\u00e2\u20ac\u2122s public key (on the server) and decrypted with the RATs private key ($public in the code)In theory if this were done properly the message to the server wouldn\u00e2\u20ac\u2122t be able to be decrypted (of course the RAT could be modified to just print it). However the keys use small primes and are thus weak.When the RAT starts, the first thing it tries to do is gain persistence.Screen Shot 2018-01-30 at 9.30.08 pm.png1273x545 65 KBIt does this by adding the location of the vbs file to the registry in the key HKCU:SOFTWARE\\Microsoft\\Windows\\CurrentVersion\\Run\\DifenderUpdate It then scedules the script at that location to be run on login.I am not sure what the first part of the persistence function is doing. I think it looks like it is disabling protections in Word\u00e2\u20ac\u2122s protected view, but I\u00e2\u20ac\u2122m not sure why that would be needed.Next the rat checks for debuggers by checking the names of running processes against a list of debuggers and other tools. If one is found it shuts down the computerScreen Shot 2018-01-30 at 9.30.56 pm.png1271x219 21.4 KBIt then tries to connect to one of the servers listed in $dragon_middle. Whenever the code errors in future it will also do this again (presumably because it thinks that server may be down or blocked)Next it tries to register with the server before accepting and handling commandsScreen Shot 2018-01-30 at 9.31.43 pm.png1274x298 26.9 KBScreen Shot 2018-01-30 at 9.32.57 pm.png1269x632 63.1 KBScreen Shot 2018-01-30 at 9.33.08 pm.png1279x351 9.96 KBThe following commands are acceptedrebootreboots the computershutdownshuts down the computercleantries to wipe as much as possible from C:, D:, E:\\ and F:\\ before rebootingscreenshottakes a screenshot and sends it to the serveruploadtransfers a file from the server to the victimIf the command is not one of those it tries to execute it in powershellI ran the keygen with the default execution policy (remember when I had to change it) and checked for the c:\\ProgramData\\WindowsNT directory to see if the RAT managed to run. The directory was not created so it seems it\u00e2\u20ac\u2122s possible that it could be blocked by windows.###Adendum:I mentioned that the crypto is weak, this is how you break it.I\u00e2\u20ac\u2122m not going to cover the basics of how RSA works here, but there is an 0x00sec tutorial here and wikipedia has a lot of good infoIn RSA two primes p and q are used to calculate n = p*q the primes used should be kept secret. They are also used to calculate \u00ce\u00bb(n) = \u00ce\u00bb(p*q) = lcm(p-1, q-1). The public exponent e and the private exponent d are related to each other by the following equation d == e^(-1) (mod \u00ce\u00bb(n)).In the case of the RAT n is small (as the result of using small primes) so it can easily be factored into p and  q. They can then be used to calculate \u00ce\u00bb(n) and then the last equation can be used to calculate d from e.Using sage math# from $private variable in rate = 959n = 713# factor n# list(factor(n)) returns prime factors as a list of tuples of (factor, amount)# we just want the factorsp, q = [a[0] for a in list(factor(n))]# calculate \u00ce\u00bb(n) l = lcm(p-1, q-1)# calculate dprint('d = {}'.format(inverse_mod(e, l)))gives d = 149With the server\u00e2\u20ac\u2122s private key we can write a script to decrypt messages sent to the server. If we use the same process to get the RAT\u00e2\u20ac\u2122s public key we could MiTM the traffic between the RAT and the server.Here is a decryption script in pythondef decrypt(ciphertext):    key = 149    n = 713    decrypted = []    for i in range(0, len(ciphertext)):        num = int(ciphertext[i])        t = pow(num, key, n)        decrypted.append(chr(t))    return ''.join(decrypted)nums = input().split()print(decrypt([int(i) for i in nums]))In @dtm\u00e2\u20ac\u2122s pcap the following is sent to the server340 362 396 383 105 598 219 362 581 362 518 73 35 73 504 220 515 665 504 515 515 35 515 518 133 335 316 665 515 665 220 665 316 181 665 335 515 38 335 335 335 316 362 663 362 145 180 396 637 383 219 362 581 362 180 383 432 432 145 219 367 362 590Running that through the script gives the decryption as{\"TOKEN\":\"70e0a413a11e17db9313439c3b1fbbb9\",\"ACTION\":\"COMMAND\"}"}, {"author": "dtm", "speak": "lkw:@dtm made a more complete list of variables here I don\u00e2\u20ac\u2122t know enough about windows to say how this was produced. But based on the format I think he used a command to print the environment (correct me if I\u00e2\u20ac\u2122m wrong).IIRC, the command wasGet-Variable | format-list Name, Value >dump.txtwhich does, unfortunately, truncate the variables. If you want the full values, you can use this (generates ugly unformated output):Get-Variable | Select -Expand Value >dump.txt"}, {"author": "termhn", "speak": "Fun little read. Nice job"}, {"author": "pry0cc", "speak": "This is amazing. This is what an awesome hacking community like this does. Good job everybody involved!"}, {"author": "W0lf", "speak": "I used this as a tutorial to learn about reversing obfuscation code. Great write up sorry i cant help beyond that"}, {"author": "SecurityFlaw", "speak": "Great work guys!Nice stuff!"}, {"author": "fraq", "speak": "This was an absolutely amazing example of catching malware in the wild and reversing it. However, I\u00e2\u20ac\u2122d like to address what i\u00e2\u20ac\u2122m seeing in the comments:Let\u00e2\u20ac\u2122s discuss the work that @lkw and friends performed here and not use this as a support thread to ask for help with the malware you discovered. Take this example and reverse your own, share your progress, and we\u00e2\u20ac\u2122ll discuss it there."}, {"author": "byakuganIII", "speak": "Yes this was an absolutely amazing malware reversing/analysis and I learned a lot of stuff from it specially reversing obfuscation scripts, and I\u00e2\u20ac\u2122m sorry if my previous comment bother you guys and I didn\u00e2\u20ac\u2122t mean to ask for support by any means, all I want was to discover if this man edit the original file or it was already malware.and even if I tried to reverse it I absolutely have zero knowledge with java and how to reverse it."}, {"author": "fraq", "speak": "This is a good chance to go as far as you can, document your work, share it, and just ask, \u00e2\u20ac\u0153Hey, what\u00e2\u20ac\u2122s my next step?\u00e2\u20ac\ufffd We love those kinds of journeys and helping people out!"}, {"author": "lkw", "speak": "We didn\u00e2\u20ac\u2122t spend as much time analyzing the keygen that it dropped, however I think it is probably not infected (I didn\u00e2\u20ac\u2122t see anything obviously bad in my quick looks). I have seen the keygen on the internet without the malware dropper. I think it is likely that the malware author found the keygen and decided to wrap it in the dropper and redistribute it."}, {"author": "byakuganIII", "speak": "From what I understand the original file was clean?"}, {"author": "system", "speak": "This topic was automatically closed after 30 days. New replies are no longer allowed."}]}